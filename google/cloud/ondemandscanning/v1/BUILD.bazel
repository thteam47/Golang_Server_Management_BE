# This file was edited to accomodate build dependencies
# after the automatic generation by BuildFileGenerator
# https://github.com/googleapis/rules_gapic/tree/master/bazel

# This is an API workspace, having public visibility by default makes perfect sense.
package(default_visibility = ["//visibility:public"])

##############################################################################
# Common
##############################################################################
load("@rules_proto//proto:defs.bzl", "proto_library")
load("@com_google_googleapis_imports//:imports.bzl", "proto_library_with_info")

proto_library(
    name = "ondemandscanning_proto",
    srcs = [
        "scanner_service.proto",
    ],
    deps = [
        "//cloud/containers/workflow/vulnerability/proto:package_proto",
        "//google/api:annotations_proto",
        "//google/api:client_proto",
        "//google/api:field_behavior_proto",
        "//google/longrunning:operations_proto",
        "//grafeas/v1:grafeas_proto",
        "@com_google_protobuf//:timestamp_proto",
    ],
)

## Must be built based on both scannerservice v1beta1 and
## Grafeas v1 protos.
proto_library_with_info(
    name = "ondemandscanning_proto_with_info",
    deps = [
        ":ondemandscanning_proto",
        "//google/cloud:common_resources_proto",
        "//grafeas/v1:grafeas_proto",
    ],
)

##############################################################################
# Java
##############################################################################
load(
    "@com_google_googleapis_imports//:imports.bzl",
    "java_gapic_assembly_gradle_pkg",
    "java_gapic_library",
    "java_gapic_test",
    "java_grpc_library",
    "java_proto_library",
)

java_proto_library(
    name = "ondemandscanning_java_proto",
    deps = [":ondemandscanning_proto"],
)

java_grpc_library(
    name = "ondemandscanning_java_grpc",
    srcs = [":ondemandscanning_proto"],
    deps = [":ondemandscanning_java_proto"],
)

java_gapic_library(
    name = "ondemandscanning_java_gapic",
    srcs = [":ondemandscanning_proto_with_info"],
    grpc_service_config = "ondemandscanning_grpc_service_config.json",
    test_deps = [
        ":ondemandscanning_java_grpc",
        "//grafeas/v1:grafeas_java_grpc",
    ],
    deps = [
        ":ondemandscanning_java_proto",
        "//grafeas/v1:grafeas_java_proto",
    ],
)

java_gapic_test(
    name = "ondemandscanning_java_gapic_test_suite",
    test_classes = [
        "com.google.cloud.ondemandscanning.v1.ScannerServiceClientTest",
    ],
    runtime_deps = [":ondemandscanning_java_gapic_test"],
)

# Open Source Packages
java_gapic_assembly_gradle_pkg(
    name = "google-cloud-ondemandscanning-v1-java",
    deps = [
        ":ondemandscanning_java_gapic",
        ":ondemandscanning_java_grpc",
        ":ondemandscanning_java_proto",
        ":ondemandscanning_proto",
        "//cloud/containers/workflow/vulnerability/proto:package_java_proto",
        "//grafeas/v1:grafeas_java_grpc",
        "//grafeas/v1:grafeas_java_proto",
    ],
)

##############################################################################
# Python
##############################################################################
load(
    "@com_google_googleapis_imports//:imports.bzl",
    "py_gapic_assembly_pkg",
    "py_gapic_library",
)

py_gapic_library(
    name = "ondemandscanning_py_gapic",
    srcs = [":ondemandscanning_proto"],
    grpc_service_config = "ondemandscanning_grpc_service_config.json",
)

# Open Source Packages
py_gapic_assembly_pkg(
    name = "ondemandscanning-v1-py",
    deps = [
        ":ondemandscanning_py_gapic",
    ],
)

##############################################################################
# PHP
##############################################################################
load(
    "@com_google_googleapis_imports//:imports.bzl",
    "php_gapic_assembly_pkg",
    "php_gapic_library",
    "php_grpc_library",
    "php_proto_library",
)

php_proto_library(
    name = "ondemandscanning_php_proto",
    deps = [":ondemandscanning_proto"],
)

php_grpc_library(
    name = "ondemandscanning_php_grpc",
    srcs = [":ondemandscanning_proto"],
    deps = [":ondemandscanning_php_proto"],
)

php_gapic_library(
    name = "ondemandscanning_php_gapic",
    srcs = [":ondemandscanning_proto_with_info"],
    grpc_service_config = "ondemandscanning_grpc_service_config.json",
    service_yaml = "ondemandscanning_v1.yaml",
    deps = [
        ":ondemandscanning_php_grpc",
        ":ondemandscanning_php_proto",
    ],
)

# Open Source Packages
php_gapic_assembly_pkg(
    name = "google-cloud-ondemandscanning-v1-php",
    deps = [
        ":ondemandscanning_php_gapic",
        ":ondemandscanning_php_grpc",
        ":ondemandscanning_php_proto",
    ],
)

##############################################################################
# Ruby
##############################################################################
load(
    "@com_google_googleapis_imports//:imports.bzl",
    "ruby_cloud_gapic_library",
    "ruby_gapic_assembly_pkg",
    "ruby_grpc_library",
    "ruby_proto_library",
)

ruby_proto_library(
    name = "ondemandscanning_ruby_proto",
    deps = [":ondemandscanning_proto"],
)

ruby_grpc_library(
    name = "ondemandscanning_ruby_grpc",
    srcs = [":ondemandscanning_proto"],
    deps = [":ondemandscanning_ruby_proto"],
)

ruby_cloud_gapic_library(
    name = "ondemandscanning_ruby_gapic",
    srcs = [":ondemandscanning_proto_with_info"],
    extra_protoc_parameters = [
        "ruby-cloud-gem-name=google-cloud-ondemandscanning-v1",
        "ruby-cloud-extra-dependencies=grafeas-v1=~> 0.0",
    ],
    grpc_service_config = "ondemandscanning_grpc_service_config.json",
    deps = [
        ":ondemandscanning_ruby_grpc",
        ":ondemandscanning_ruby_proto",
    ],
)

# Open Source Packages
ruby_gapic_assembly_pkg(
    name = "google-cloud-ondemandscanning-v1-ruby",
    deps = [
        ":ondemandscanning_ruby_gapic",
        ":ondemandscanning_ruby_grpc",
        ":ondemandscanning_ruby_proto",
    ],
)

##############################################################################
# C#
##############################################################################
load(
    "@com_google_googleapis_imports//:imports.bzl",
    "csharp_gapic_assembly_pkg",
    "csharp_gapic_library",
    "csharp_grpc_library",
    "csharp_proto_library",
)

csharp_proto_library(
    name = "ondemandscanning_csharp_proto",
    deps = [":ondemandscanning_proto"],
)

csharp_grpc_library(
    name = "ondemandscanning_csharp_grpc",
    srcs = [":ondemandscanning_proto"],
    deps = [":ondemandscanning_csharp_proto"],
)

csharp_gapic_library(
    name = "ondemandscanning_csharp_gapic",
    srcs = [":ondemandscanning_proto_with_info"],
    common_resources_config = "@gax_dotnet//:Google.Api.Gax/ResourceNames/CommonResourcesConfig.json",
    grpc_service_config = "ondemandscanning_grpc_service_config.json",
    deps = [
        ":ondemandscanning_csharp_grpc",
        ":ondemandscanning_csharp_proto",
    ],
)

# Open Source Packages
csharp_gapic_assembly_pkg(
    name = "google-cloud-ondemandscanning-v1-csharp",
    deps = [
        ":ondemandscanning_csharp_gapic",
        ":ondemandscanning_csharp_grpc",
        ":ondemandscanning_csharp_proto",
    ],
)

##############################################################################
# Go
##############################################################################
load(
    "@com_google_googleapis_imports//:imports.bzl",
    "go_gapic_assembly_pkg",
    "go_gapic_library",
    "go_proto_library",
    "go_test",
)

go_proto_library(
    name = "ondemandscanning_go_proto",
    compilers = ["@io_bazel_rules_go//proto:go_grpc"],
    importpath = "google.golang.org/genproto/googleapis/cloud/ondemandscanning/v1",
    protos = [":ondemandscanning_proto"],
    deps = [
        "//cloud/containers/workflow/vulnerability/proto:package_go_proto",
        "//google/api:annotations_go_proto",
        "//google/longrunning:longrunning_go_proto",
        "//grafeas/v1:grafeas_go_proto",
    ],
)

go_gapic_library(
    name = "ondemandscanning_go_gapic",
    srcs = [":ondemandscanning_proto_with_info"],
    grpc_service_config = "ondemandscanning_grpc_service_config.json",
    importpath = "cloud.google.com/go/ondemandscanning/apiv1;ondemandscanning",
    metadata = True,
    service_yaml = "ondemandscanning_v1.yaml",
    deps = [
        ":ondemandscanning_go_proto",
        "//google/longrunning:longrunning_go_proto",
        "//grafeas/v1:grafeas_go_proto",
        "@com_google_cloud_go//longrunning:go_default_library",
        "@com_google_cloud_go//longrunning/autogen:go_default_library",
    ],
)

go_test(
    name = "ondemandscanning_go_gapic_test",
    srcs = [":ondemandscanning_go_gapic_srcjar_test"],
    embed = [":ondemandscanning_go_gapic"],
    importpath = "cloud.google.com/go/ondemandscanning/apiv1",
)

# Open Source Packages
go_gapic_assembly_pkg(
    name = "gapi-cloud-ondemandscanning-v1-go",
    deps = [
        ":ondemandscanning_go_gapic",
        ":ondemandscanning_go_gapic_srcjar-metadata.srcjar",
        ":ondemandscanning_go_gapic_srcjar-test.srcjar",
        ":ondemandscanning_go_proto",
    ],
)

##############################################################################
# Node.js
##############################################################################
load(
    "@com_google_googleapis_imports//:imports.bzl",
    "nodejs_gapic_assembly_pkg",
    "nodejs_gapic_library",
)

nodejs_gapic_library(
    name = "ondemandscanning_nodejs_gapic",
    package_name = "@google-cloud/ondemandscanning",
    src = ":ondemandscanning_proto_with_info",
    extra_protoc_parameters = ["metadata"],
    grpc_service_config = "ondemandscanning_grpc_service_config.json",
    main_service = "ondemandscanning",
    package = "google.cloud.ondemandscanning.v1",
    service_yaml = "ondemandscanning_v1.yaml",
    deps = [],
)

nodejs_gapic_assembly_pkg(
    name = "ondemandscanning-v1-nodejs",
    deps = [
        ":ondemandscanning_nodejs_gapic",
        ":ondemandscanning_proto",
        "//grafeas/v1:grafeas_proto",
    ],
)

##############################################################################
# C++
##############################################################################
# Put your C++ rules here
